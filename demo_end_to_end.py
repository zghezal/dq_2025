#!/usr/bin/env python3
"""
D√©monstration end-to-end du syst√®me complet.

Ce script montre l'int√©gration compl√®te:
1. D√©couverte des plugins
2. Construction du catalogue virtuel
3. S√©quen√ßage automatique
4. Ex√©cution avec r√©sultats

C'est la d√©monstration ultime que tout fonctionne ! üöÄ
"""

import sys
from pathlib import Path
import pandas as pd

# Ajouter src au path
sys.path.insert(0, str(Path(__file__).parent))

from src.plugins.discovery import discover_all_plugins
from src.plugins.virtual_catalog import VirtualCatalog
from src.plugins.sequencer import build_execution_plan, print_execution_plan
from src.plugins.executor import Executor, ExecutionContext, print_execution_result


class DemoContext:
    """Context de d√©mo avec donn√©es r√©alistes."""
    
    def __init__(self):
        # Cr√©er des datasets de d√©mo
        self.sales_data = pd.DataFrame({
            "date": pd.date_range("2024-01-01", periods=20, freq="D"),
            "region": ["North", "South", "East", "West"] * 5,
            "product": ["Laptop", "Phone", "Tablet", "Watch"] * 5,
            "amount": [1500, 800, 600, 300, 1200, 900, 550, 250,
                      1800, 850, 650, 350, 1100, 750, 500, 280,
                      1600, 820, 580, 320],
            "quantity": [2, 3, 4, 5, 1, 2, 3, 4, 2, 3, 1, 2, 3, 4, 5, 1, 2, 3, 4, 5]
        })
        
        # Ajouter quelques valeurs manquantes
        self.sales_data.loc[2, "amount"] = None
        self.sales_data.loc[7, "amount"] = None
        self.sales_data.loc[15, "quantity"] = None
    
    def load(self, alias: str):
        """Charge un dataset par alias."""
        if alias == "sales":
            return self.sales_data
        raise ValueError(f"Dataset '{alias}' inconnu")


def demo_1_full_workflow():
    """D√©mo 1: Workflow complet simple."""
    print("\n" + "üîµ " * 35)
    print("DEMO 1: Workflow complet - M√©triques + Tests")
    print("üîµ " * 35)
    
    # Configuration DQ
    config = {
        "metrics": [
            {
                "id": "M-001",
                "type": "missing_rate",
                "params": {
                    "dataset": "sales",
                    "column": "amount"
                }
            },
            {
                "id": "M-002",
                "type": "missing_rate",
                "params": {
                    "dataset": "sales",
                    "column": "quantity"
                }
            }
        ],
        "tests": [
            {
                "id": "T-001",
                "type": "range",
                "params": {
                    "value_from_metric": "M-001",
                    "low": 0.0,
                    "high": 0.15,
                    "inclusive": True
                }
            },
            {
                "id": "T-002",
                "type": "range",
                "params": {
                    "value_from_metric": "M-002",
                    "low": 0.0,
                    "high": 0.1,
                    "inclusive": True
                }
            }
        ]
    }
    
    print("\nüìã Configuration DQ:")
    print(f"  - {len(config['metrics'])} m√©triques")
    print(f"  - {len(config['tests'])} tests")
    
    # √âtape 1: D√©couverte
    print("\n[1/4] üîç D√©couverte des plugins...")
    plugins = discover_all_plugins(verbose=False)
    print(f"      ‚úÖ {len(plugins)} plugins d√©couverts")
    
    # √âtape 2: Catalogue virtuel
    print("\n[2/4] üìö Construction du catalogue virtuel...")
    catalog = VirtualCatalog()
    virtual_count = catalog.register_from_config(config)
    print(f"      ‚úÖ {virtual_count} virtual datasets cr√©√©s")
    
    # √âtape 3: S√©quen√ßage
    print("\n[3/4] üîÄ S√©quen√ßage automatique...")
    plan = build_execution_plan(config, catalog)
    print(f"      ‚úÖ Plan avec {len(plan.steps)} steps, {plan.max_level + 1} niveaux")
    print_execution_plan(plan)
    
    # √âtape 4: Ex√©cution
    print("\n[4/4] ‚ñ∂Ô∏è  Ex√©cution du plan...")
    demo_ctx = DemoContext()
    executor = Executor(ExecutionContext(demo_ctx.load))
    result = executor.execute(plan)
    
    # R√©sultats d√©taill√©s
    print_execution_result(result)
    
    # Analyse
    print("\nüí° Analyse:")
    print(f"   M-001 (missing_rate sur amount): {result.metrics['M-001']:.2%}")
    print(f"   M-002 (missing_rate sur quantity): {result.metrics['M-002']:.2%}")
    print(f"   T-001 (test sur M-001): {'‚úÖ PASS' if result.tests['T-001']['passed'] else '‚ùå FAIL'}")
    print(f"   T-002 (test sur M-002): {'‚úÖ PASS' if result.tests['T-002']['passed'] else '‚ùå FAIL'}")


def demo_2_with_aggregation():
    """D√©mo 2: Avec agr√©gation et virtual datasets."""
    print("\n" + "üü¢ " * 35)
    print("DEMO 2: Agr√©gation + Virtual Datasets")
    print("üü¢ " * 35)
    
    config = {
        "metrics": [
            {
                "id": "M-001",
                "type": "aggregation_by_column",
                "params": {
                    "dataset": "sales",
                    "group_by": "region",
                    "target": "amount"
                }
            }
        ],
        "tests": []
    }
    
    print("\nüìã Configuration DQ:")
    print("  - Agr√©gation des ventes par r√©gion")
    print("  - Calcul de sum, avg, min, max pour chaque r√©gion")
    
    # Pipeline complet
    print("\n[1/4] D√©couverte...")
    discover_all_plugins(verbose=False)
    
    print("[2/4] Catalogue virtuel...")
    catalog = VirtualCatalog()
    catalog.register_from_config(config)
    print(f"      ‚úÖ Virtual dataset 'virtual:M-001' cr√©√©")
    print(f"      ‚úÖ Colonnes disponibles: {catalog.get_columns('virtual:M-001')}")
    
    print("\n[3/4] S√©quen√ßage...")
    plan = build_execution_plan(config, catalog)
    
    print("\n[4/4] Ex√©cution...")
    demo_ctx = DemoContext()
    executor = Executor(ExecutionContext(demo_ctx.load))
    result = executor.execute(plan)
    
    # Afficher le DataFrame r√©sultant
    if "M-001" in result.dataframes:
        df = result.dataframes["M-001"]
        print("\nüìä R√©sultat de l'agr√©gation:")
        print(df.to_string(index=False))
        
        print("\nüí° Observations:")
        print(f"   - {len(df)} r√©gions analys√©es")
        print(f"   - Total des ventes: {df['sum_amount'].sum():.2f}‚Ç¨")
        print(f"   - R√©gion avec plus de ventes: {df.loc[df['sum_amount'].idxmax(), 'region']}")


def demo_3_complex_workflow():
    """D√©mo 3: Workflow complexe avec d√©pendances."""
    print("\n" + "üü° " * 35)
    print("DEMO 3: Workflow complexe avec d√©pendances")
    print("üü° " * 35)
    
    config = {
        "metrics": [
            {
                "id": "M-001",
                "type": "aggregation_by_column",
                "params": {
                    "dataset": "sales",
                    "group_by": "region",
                    "target": "amount"
                }
            },
            {
                "id": "M-002",
                "type": "missing_rate",
                "params": {
                    "dataset": "sales",
                    "column": "amount"
                }
            },
            {
                "id": "M-003",
                "type": "missing_rate",
                "params": {
                    "dataset": "sales",
                    "column": "quantity"
                }
            }
        ],
        "tests": [
            # Test sur le missing rate
            {
                "id": "T-001",
                "type": "range",
                "params": {
                    "value_from_metric": "M-002",
                    "low": 0.0,
                    "high": 0.2,
                    "inclusive": True
                }
            },
            # Test sur un autre missing rate
            {
                "id": "T-002",
                "type": "range",
                "params": {
                    "value_from_metric": "M-003",
                    "low": 0.0,
                    "high": 0.1,
                    "inclusive": True
                }
            }
        ]
    }
    
    print("\nüìã Configuration DQ:")
    print("  - 3 m√©triques (1 agr√©gation + 2 missing rates)")
    print("  - 2 tests (validation des missing rates)")
    
    # Pipeline complet
    discover_all_plugins(verbose=False)
    
    catalog = VirtualCatalog()
    catalog.register_from_config(config)
    
    plan = build_execution_plan(config, catalog)
    print_execution_plan(plan)
    
    demo_ctx = DemoContext()
    executor = Executor(ExecutionContext(demo_ctx.load))
    result = executor.execute(plan)
    
    print_execution_result(result)
    
    # Afficher le DataFrame d'agr√©gation
    if "M-001" in result.dataframes:
        df = result.dataframes["M-001"]
        print("\nüìä Agr√©gation par r√©gion:")
        print(df.to_string(index=False))
    
    print("\nüí° R√©sum√©:")
    print(f"   ‚úÖ {len(result.get_successful_steps())} steps r√©ussis")
    print(f"   ‚è±Ô∏è  Dur√©e totale: {result.total_duration_ms:.0f}ms")
    print(f"   üìà Donn√©es: {len(demo_ctx.sales_data)} lignes analys√©es")


def demo_4_virtual_dataset_usage():
    """D√©mo 4: Utilisation r√©elle d'un virtual dataset dans un test."""
    print("\n" + "üü£ " * 35)
    print("DEMO 4: Tests utilisant des virtual datasets")
    print("üü£ " * 35)
    
    print("\n‚ö†Ô∏è  Note: Cette d√©mo n√©cessite un plugin de test qui peut")
    print("   lire des colonnes de virtual datasets. Pour l'instant,")
    print("   nous montrons la m√©canique sans l'ex√©cution compl√®te.")
    
    config = {
        "metrics": [
            {
                "id": "M-001",
                "type": "aggregation_by_column",
                "params": {
                    "dataset": "sales",
                    "group_by": "region",
                    "target": "amount"
                }
            }
        ],
        "tests": []
    }
    
    # Montrer la m√©canique
    discover_all_plugins(verbose=False)
    
    catalog = VirtualCatalog()
    catalog.register_from_config(config)
    
    print("\nüìö Catalogue virtuel cr√©√©:")
    print(f"   Dataset: virtual:M-001")
    print(f"   Colonnes: {catalog.get_columns('virtual:M-001')}")
    
    plan = build_execution_plan(config, catalog)
    
    demo_ctx = DemoContext()
    exec_context = ExecutionContext(demo_ctx.load)
    executor = Executor(exec_context)
    result = executor.execute(plan)
    
    # Montrer qu'on peut charger le virtual dataset
    print("\nüîç Test du virtual dataset:")
    virtual_df = exec_context.load("virtual:M-001")
    print(f"   ‚úÖ Chargement r√©ussi: {len(virtual_df)} lignes")
    print("\n   Aper√ßu du virtual dataset:")
    print(virtual_df.to_string(index=False))
    
    print("\nüí° Un test pourrait maintenant:")
    print("   1. S√©lectionner la colonne 'sum_amount'")
    print("   2. V√©rifier que sum_amount > 1000 pour chaque r√©gion")
    print("   3. Valider la coh√©rence des donn√©es agr√©g√©es")


def main():
    print("\n" + "=" * 70)
    print(" üöÄ D√âMONSTRATION END-TO-END DU SYST√àME COMPLET")
    print("=" * 70)
    print("\nCe script d√©montre l'int√©gration compl√®te:")
    print("  1Ô∏è‚É£  D√©couverte automatique des plugins")
    print("  2Ô∏è‚É£  Construction du catalogue de virtual datasets")
    print("  3Ô∏è‚É£  S√©quen√ßage automatique avec d√©tection de d√©pendances")
    print("  4Ô∏è‚É£  Ex√©cution avec gestion d'erreurs et validation")
    
    demos = [
        ("1", "Workflow complet simple", demo_1_full_workflow),
        ("2", "Agr√©gation + Virtual Datasets", demo_2_with_aggregation),
        ("3", "Workflow complexe", demo_3_complex_workflow),
        ("4", "Virtual datasets en action", demo_4_virtual_dataset_usage)
    ]
    
    print("\nD√©mos disponibles:")
    for num, title, _ in demos:
        print(f"  {num}. {title}")
    
    choice = input("\nEx√©cuter toutes les d√©mos? [Y/n] ").strip().lower()
    
    if choice in ("", "y", "yes", "o", "oui"):
        for num, title, func in demos:
            func()
            input("\nAppuyez sur Entr√©e pour continuer...")
    else:
        choice = input("Quelle d√©mo? [1-4] ").strip()
        for num, title, func in demos:
            if num == choice:
                func()
                break
    
    print("\n" + "=" * 70)
    print("‚úÖ D√©monstration termin√©e!")
    print("=" * 70)
    print("\nüéâ Le syst√®me complet fonctionne:")
    print("  ‚úì Plugins auto-d√©couverts")
    print("  ‚úì Virtual datasets cr√©√©s automatiquement")
    print("  ‚úì Plans d'ex√©cution optimaux")
    print("  ‚úì Ex√©cution avec r√©sultats stock√©s")
    print("\nVous √™tes pr√™t pour:")
    print("  ‚Ä¢ Cr√©er le vrai Context (inventory.yaml)")
    print("  ‚Ä¢ Construire l'API FastAPI")
    print("  ‚Ä¢ Adapter l'UI Dash")


if __name__ == "__main__":
    main()
